class GfG
{
    Node mergeResult(Node node1, Node node2)
    {
     Node head = new Node(-1);
	   Node temp=head;
	   while(node1!=null || node2!=null){
	       int val1 = node1!=null?node1.data:Integer.MAX_VALUE;
	       int val2 = node2!=null?node2.data:Integer.MAX_VALUE;
	
	       if(val1<val2){
	           temp.next=node1;
	           node1 = node1.next;
	       }else{
	           temp.next =node2;
	           node2 = node2.next;
	       }
	       temp = temp.next;
	   }
	   head = head.next;
	   return reverse(head);
    }
    
    Node reverse(Node head){
       Node prev = null, curr=head;
        while(curr!=null){
            Node next = curr.next;
            curr.next=prev;
            prev=curr;
            curr=next;
        }
        return prev;
    }

}
Time Complexity - O(N) MAXIMUM OF NODES WITH RESPECT TO BOTH LINKEDLIST
SPACE Complexity - O(1) 
