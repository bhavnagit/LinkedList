class Solution
{
    public static void rearrange(Node odd)
    {
        // add your code here
        Node head  = odd;
        Node even = odd.next;
        Node headofeven = even;
        while(even != null && even.next != null){
            odd.next = odd.next.next;
            even.next = even.next.next;
            odd = odd.next;
            even = even.next;
        }
        Node reverseEvenElement = reverseList(headofeven);
        odd.next = reverseEvenElement;
    }
    public static Node reverseList(Node head) {
        Node curr=head,prev=null;
        while(curr!=null){
            Node temp=curr.next;
            curr.next=prev;
            prev=curr;
            curr=temp;
        }
        return prev;
    }
}

Time Complexity - O(N)
Space Complexity - O(1)

First create a reverse function in which we can reverse the list accordingto the given head, and the separate the odd pointing list and eve pointing list and then 
reverse the list from the even part and then the desired result will come.
