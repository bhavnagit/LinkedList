/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
   public ListNode reverseList(ListNode head) {
        ListNode curr=head,prev=null;
        while(curr!=null){
            ListNode temp=curr.next;
            curr.next=prev;
            prev=curr;
            curr=temp;
        }
        return prev;
    }
}

This is an iterative solution of reversing a linkedlist.

Time complexity is - O(n) and space complexity is O(1).


Reverse A linkedList using AddFirst() methid

class Solution {
     ListNode th = null;
    ListNode tt = null;
    
    public void  addFirst(ListNode node){
        if(th == null){
            th = node;
            tt = node;
        }else{
            node.next = th;
            th = node;
        }
    }
    public ListNode reverseList(ListNode head) {
        ListNode curr = head;
        while( curr != null){
            ListNode forw = curr.next;
            curr.next = null;
            addFirst(curr);
            
            curr = forw;
        }
        return th;
        
    }
}

The time complexity of this is O(N)
And the space complexity is O(1).
