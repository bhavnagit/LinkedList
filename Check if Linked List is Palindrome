
class Solution {
    public boolean isPalindrome(ListNode head) {
        ArrayList<Integer> ans = new ArrayList<>();
        //store the linkedlist value in the new arraylist and checking the reverse of arraylist withthe original list;
        ListNode temp = head;
        
        while(temp != null){
            ans.add(temp.val);
            temp = temp.next;
        }
        int i = ans.size() - 1;
        while(head != null){
            if(head.val != ans.get(i))
                return false;
            i--;
            head = head.next;
        }
        return true;
    }
}

Time Complexity - O(N)
Space Complexity - O(N)






class Solution
{
    //Function to check whether the list is palindrome.
    boolean isPalindrome(Node head) 
    {
        //Your code herif(head==null||head.next==null) return true;
        
    Node slow = head;
    Node fast = head;
        
    while(fast.next!=null&&fast.next.next!=null) {
        slow = slow.next;
        fast = fast.next.next;
    }
        
    slow.next = reverse(slow.next);
    slow = slow.next;
    Node dummy = head;
        
    while(slow!=null) {
        if(dummy.data != slow.data) return false;
        dummy = dummy.next;
        slow = slow.next;
    }
    return true;
    }    
    static Node reverse(Node ptr) {
    Node pre=null;
    Node nex=null;
    while(ptr!=null) {
        nex = ptr.next;
        ptr.next = pre;
        pre=ptr;
        ptr=nex;
    }
    return pre;
 }
}

TIME Complexity - O(N)
Space Complexity - O(1)
